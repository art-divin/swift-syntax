//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension GenericArgumentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeArgument")
  public var unexpectedBeforeArgumentType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeArgument
    }
    set {
      unexpectedBeforeArgument = newValue
    }
  }
  
  @available(*, deprecated, renamed: "argument")
  public var argumentType: TypeSyntax {
    get {
      return argument
    }
    set {
      argument = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentAndTrailingComma")
  public var unexpectedBetweenArgumentTypeAndTrailingComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentAndTrailingComma
    }
    set {
      unexpectedBetweenArgumentAndTrailingComma = newValue
    }
  }
  
  @available(*, deprecated, renamed: "GenericArgumentSyntax(leadingTrivia:_:argument:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeArgumentType: UnexpectedNodesSyntax? = nil,
      argumentType: some TypeSyntaxProtocol,
      _ unexpectedBetweenArgumentTypeAndTrailingComma: UnexpectedNodesSyntax? = nil,
      trailingComma: TokenSyntax? = nil,
      _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeArgumentType, 
        argument: argumentType, 
        unexpectedBetweenArgumentTypeAndTrailingComma, 
        trailingComma: trailingComma, 
        unexpectedAfterTrailingComma, 
        trailingTrivia: trailingTrivia
      )
  }
}
