//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

/// A collection of arguments for the `@_specialize` attribute
///
/// ### Children
/// 
/// (``LabeledSpecializeArgumentSyntax`` | ``SpecializeAvailabilityArgumentSyntax`` | ``SpecializeTargetFunctionArgumentSyntax`` | ``GenericWhereClauseSyntax``) `*`
///
/// ### Contained in
/// 
///  - ``AttributeSyntax``.``AttributeSyntax/arguments``
public struct SpecializeAttributeArgumentListSyntax: SyntaxCollection, SyntaxHashable {
  public enum Element: SyntaxChildChoices, SyntaxHashable {
    case `labeledSpecializeArgument`(LabeledSpecializeArgumentSyntax)
    case `specializeAvailabilityArgument`(SpecializeAvailabilityArgumentSyntax)
    case `specializeTargetFunctionArgument`(SpecializeTargetFunctionArgumentSyntax)
    case `genericWhereClause`(GenericWhereClauseSyntax)
    
    public var _syntaxNode: Syntax {
      switch self {
      case .labeledSpecializeArgument(let node):
        return node._syntaxNode
      case .specializeAvailabilityArgument(let node):
        return node._syntaxNode
      case .specializeTargetFunctionArgument(let node):
        return node._syntaxNode
      case .genericWhereClause(let node):
        return node._syntaxNode
      }
    }
    
    public init(_ node: LabeledSpecializeArgumentSyntax) {
      self = .labeledSpecializeArgument(node)
    }
    
    public init(_ node: SpecializeAvailabilityArgumentSyntax) {
      self = .specializeAvailabilityArgument(node)
    }
    
    public init(_ node: SpecializeTargetFunctionArgumentSyntax) {
      self = .specializeTargetFunctionArgument(node)
    }
    
    public init(_ node: GenericWhereClauseSyntax) {
      self = .genericWhereClause(node)
    }
    
    public init?(_ node: some SyntaxProtocol) {
      if let node = node.as(LabeledSpecializeArgumentSyntax.self) {
        self = .labeledSpecializeArgument(node)
        return
      }
      if let node = node.as(SpecializeAvailabilityArgumentSyntax.self) {
        self = .specializeAvailabilityArgument(node)
        return
      }
      if let node = node.as(SpecializeTargetFunctionArgumentSyntax.self) {
        self = .specializeTargetFunctionArgument(node)
        return
      }
      if let node = node.as(GenericWhereClauseSyntax.self) {
        self = .genericWhereClause(node)
        return
      }
      return nil
    }
    
    public static var structure: SyntaxNodeStructure {
      return .choices([
            .node(LabeledSpecializeArgumentSyntax.self),
            .node(SpecializeAvailabilityArgumentSyntax.self),
            .node(SpecializeTargetFunctionArgumentSyntax.self),
            .node(GenericWhereClauseSyntax.self)
          ])
    }
    
    /// Checks if the current syntax node can be cast to ``LabeledSpecializeArgumentSyntax``.
    ///
    /// - Returns: `true` if the node can be cast, `false` otherwise.
    public func `is`(_ syntaxType: LabeledSpecializeArgumentSyntax.Type) -> Bool {
      return self.as(syntaxType) != nil
    }
    
    /// Attempts to cast the current syntax node to ``LabeledSpecializeArgumentSyntax``.
    ///
    /// - Returns: An instance of ``LabeledSpecializeArgumentSyntax``, or `nil` if the cast fails.
    public func `as`(_ syntaxType: LabeledSpecializeArgumentSyntax.Type) -> LabeledSpecializeArgumentSyntax? {
      return LabeledSpecializeArgumentSyntax.init(self)
    }
    
    /// Force-casts the current syntax node to ``LabeledSpecializeArgumentSyntax``.
    ///
    /// - Returns: An instance of ``LabeledSpecializeArgumentSyntax``.
    /// - Warning: This function will crash if the cast is not possible. Use `as` to safely attempt a cast.
    public func cast(_ syntaxType: LabeledSpecializeArgumentSyntax.Type) -> LabeledSpecializeArgumentSyntax {
      return self.as(LabeledSpecializeArgumentSyntax.self)!
    }
    
    /// Checks if the current syntax node can be cast to ``SpecializeAvailabilityArgumentSyntax``.
    ///
    /// - Returns: `true` if the node can be cast, `false` otherwise.
    public func `is`(_ syntaxType: SpecializeAvailabilityArgumentSyntax.Type) -> Bool {
      return self.as(syntaxType) != nil
    }
    
    /// Attempts to cast the current syntax node to ``SpecializeAvailabilityArgumentSyntax``.
    ///
    /// - Returns: An instance of ``SpecializeAvailabilityArgumentSyntax``, or `nil` if the cast fails.
    public func `as`(_ syntaxType: SpecializeAvailabilityArgumentSyntax.Type) -> SpecializeAvailabilityArgumentSyntax? {
      return SpecializeAvailabilityArgumentSyntax.init(self)
    }
    
    /// Force-casts the current syntax node to ``SpecializeAvailabilityArgumentSyntax``.
    ///
    /// - Returns: An instance of ``SpecializeAvailabilityArgumentSyntax``.
    /// - Warning: This function will crash if the cast is not possible. Use `as` to safely attempt a cast.
    public func cast(_ syntaxType: SpecializeAvailabilityArgumentSyntax.Type) -> SpecializeAvailabilityArgumentSyntax {
      return self.as(SpecializeAvailabilityArgumentSyntax.self)!
    }
    
    /// Checks if the current syntax node can be cast to ``SpecializeTargetFunctionArgumentSyntax``.
    ///
    /// - Returns: `true` if the node can be cast, `false` otherwise.
    public func `is`(_ syntaxType: SpecializeTargetFunctionArgumentSyntax.Type) -> Bool {
      return self.as(syntaxType) != nil
    }
    
    /// Attempts to cast the current syntax node to ``SpecializeTargetFunctionArgumentSyntax``.
    ///
    /// - Returns: An instance of ``SpecializeTargetFunctionArgumentSyntax``, or `nil` if the cast fails.
    public func `as`(_ syntaxType: SpecializeTargetFunctionArgumentSyntax.Type) -> SpecializeTargetFunctionArgumentSyntax? {
      return SpecializeTargetFunctionArgumentSyntax.init(self)
    }
    
    /// Force-casts the current syntax node to ``SpecializeTargetFunctionArgumentSyntax``.
    ///
    /// - Returns: An instance of ``SpecializeTargetFunctionArgumentSyntax``.
    /// - Warning: This function will crash if the cast is not possible. Use `as` to safely attempt a cast.
    public func cast(_ syntaxType: SpecializeTargetFunctionArgumentSyntax.Type) -> SpecializeTargetFunctionArgumentSyntax {
      return self.as(SpecializeTargetFunctionArgumentSyntax.self)!
    }
    
    /// Checks if the current syntax node can be cast to ``GenericWhereClauseSyntax``.
    ///
    /// - Returns: `true` if the node can be cast, `false` otherwise.
    public func `is`(_ syntaxType: GenericWhereClauseSyntax.Type) -> Bool {
      return self.as(syntaxType) != nil
    }
    
    /// Attempts to cast the current syntax node to ``GenericWhereClauseSyntax``.
    ///
    /// - Returns: An instance of ``GenericWhereClauseSyntax``, or `nil` if the cast fails.
    public func `as`(_ syntaxType: GenericWhereClauseSyntax.Type) -> GenericWhereClauseSyntax? {
      return GenericWhereClauseSyntax.init(self)
    }
    
    /// Force-casts the current syntax node to ``GenericWhereClauseSyntax``.
    ///
    /// - Returns: An instance of ``GenericWhereClauseSyntax``.
    /// - Warning: This function will crash if the cast is not possible. Use `as` to safely attempt a cast.
    public func cast(_ syntaxType: GenericWhereClauseSyntax.Type) -> GenericWhereClauseSyntax {
      return self.as(GenericWhereClauseSyntax.self)!
    }
  }
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .specializeAttributeArgumentList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.specializeAttributeArgumentList
}
