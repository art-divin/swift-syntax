//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

// MARK: - DoExprSyntax

/// A `do` block with one of more optional `catch` clauses.
/// 
/// This represents do blocks in both expression and statement postitions
/// (where the latter are wrapped in ExpressionStmtSyntax).
/// 
/// ### Examples
/// 
/// ```swift
/// do {
///   let x = 0
///   print(x)
/// }
/// ```
/// 
/// ```swift
/// let x = do {
///   try someThrowingFn()
/// } catch {
///   defaultValue
/// }
/// ```
///
/// - Experiment: Requires experimental feature `doExpressions`.
///
/// ### Children
/// 
///  - `doKeyword`: `do`
///  - `body`: ``CodeBlockSyntax``
///  - `catchClauses`: ``CatchClauseListSyntax``
#if compiler(>=5.8)
@_spi(ExperimentalLanguageFeatures)
#endif
public struct DoExprSyntax: ExprSyntaxProtocol, SyntaxHashable, _LeafExprSyntaxNodeProtocol {
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .doExpr else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  /// - Parameters:
  ///   - leadingTrivia: Trivia to be prepended to the leading trivia of the node’s first token. If the node is empty, there is no token to attach the trivia to and the parameter is ignored.
  ///   - trailingTrivia: Trivia to be appended to the trailing trivia of the node’s last token. If the node is empty, there is no token to attach the trivia to and the parameter is ignored.
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeDoKeyword: UnexpectedNodesSyntax? = nil,
      doKeyword: TokenSyntax = .keyword(.do),
      _ unexpectedBetweenDoKeywordAndBody: UnexpectedNodesSyntax? = nil,
      body: CodeBlockSyntax,
      _ unexpectedBetweenBodyAndCatchClauses: UnexpectedNodesSyntax? = nil,
      catchClauses: CatchClauseListSyntax = [],
      _ unexpectedAfterCatchClauses: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    // Extend the lifetime of all parameters so their arenas don't get destroyed
    // before they can be added as children of the new arena.
    self = withExtendedLifetime((SyntaxArena(), (
            unexpectedBeforeDoKeyword, 
            doKeyword, 
            unexpectedBetweenDoKeywordAndBody, 
            body, 
            unexpectedBetweenBodyAndCatchClauses, 
            catchClauses, 
            unexpectedAfterCatchClauses
          ))) { (arena, _) in
      let layout: [RawSyntax?] = [
          unexpectedBeforeDoKeyword?.raw, 
          doKeyword.raw, 
          unexpectedBetweenDoKeywordAndBody?.raw, 
          body.raw, 
          unexpectedBetweenBodyAndCatchClauses?.raw, 
          catchClauses.raw, 
          unexpectedAfterCatchClauses?.raw
        ]
      let raw = RawSyntax.makeLayout(
        kind: SyntaxKind.doExpr,
        from: layout,
        arena: arena,
        leadingTrivia: leadingTrivia,
        trailingTrivia: trailingTrivia
        
      )
      return Syntax.forRoot(raw, rawNodeArena: arena).cast(Self.self)
    }
  }
  
  public var unexpectedBeforeDoKeyword: UnexpectedNodesSyntax? {
    get {
      return Syntax(self).child(at: 0)?.cast(UnexpectedNodesSyntax.self)
    }
    set(value) {
      self = Syntax(self).replacingChild(at: 0, with: Syntax(value), arena: SyntaxArena()).cast(DoExprSyntax.self)
    }
  }
  
  /// ### Tokens
  /// 
  /// For syntax trees generated by the parser, this is guaranteed to be `do`.
  public var doKeyword: TokenSyntax {
    get {
      return Syntax(self).child(at: 1)!.cast(TokenSyntax.self)
    }
    set(value) {
      self = Syntax(self).replacingChild(at: 1, with: Syntax(value), arena: SyntaxArena()).cast(DoExprSyntax.self)
    }
  }
  
  public var unexpectedBetweenDoKeywordAndBody: UnexpectedNodesSyntax? {
    get {
      return Syntax(self).child(at: 2)?.cast(UnexpectedNodesSyntax.self)
    }
    set(value) {
      self = Syntax(self).replacingChild(at: 2, with: Syntax(value), arena: SyntaxArena()).cast(DoExprSyntax.self)
    }
  }
  
  public var body: CodeBlockSyntax {
    get {
      return Syntax(self).child(at: 3)!.cast(CodeBlockSyntax.self)
    }
    set(value) {
      self = Syntax(self).replacingChild(at: 3, with: Syntax(value), arena: SyntaxArena()).cast(DoExprSyntax.self)
    }
  }
  
  public var unexpectedBetweenBodyAndCatchClauses: UnexpectedNodesSyntax? {
    get {
      return Syntax(self).child(at: 4)?.cast(UnexpectedNodesSyntax.self)
    }
    set(value) {
      self = Syntax(self).replacingChild(at: 4, with: Syntax(value), arena: SyntaxArena()).cast(DoExprSyntax.self)
    }
  }
  
  public var catchClauses: CatchClauseListSyntax {
    get {
      return Syntax(self).child(at: 5)!.cast(CatchClauseListSyntax.self)
    }
    set(value) {
      self = Syntax(self).replacingChild(at: 5, with: Syntax(value), arena: SyntaxArena()).cast(DoExprSyntax.self)
    }
  }
  
  /// Adds the provided `element` to the node's `catchClauses`
  /// collection.
  ///
  /// - param element: The new `CatchClause` to add to the node's
  ///                  `catchClauses` collection.
  /// - returns: A copy of the receiver with the provided `CatchClause`
  ///            appended to its `catchClauses` collection.
  @available(*, deprecated, message: "Use node.catchClauses.append(newElement) instead")
  public func addCatchClause(_ element: CatchClauseSyntax) -> DoExprSyntax {
    var collection: RawSyntax
    let arena = SyntaxArena()
    if let col = raw.layoutView!.children[5] {
      collection = col.layoutView!.appending(element.raw, arena: arena)
    } else {
      collection = RawSyntax.makeLayout(kind: SyntaxKind.catchClauseList,
                                        from: [element.raw], arena: arena)
    }
    return Syntax(self)
      .replacingChild(
        at: 5, 
        with: collection, 
        rawNodeArena: arena, 
        allocationArena: arena
      )
      .cast(DoExprSyntax.self)
  }
  
  public var unexpectedAfterCatchClauses: UnexpectedNodesSyntax? {
    get {
      return Syntax(self).child(at: 6)?.cast(UnexpectedNodesSyntax.self)
    }
    set(value) {
      self = Syntax(self).replacingChild(at: 6, with: Syntax(value), arena: SyntaxArena()).cast(DoExprSyntax.self)
    }
  }
  
  public static var structure: SyntaxNodeStructure {
    return .layout([
          \Self.unexpectedBeforeDoKeyword, 
          \Self.doKeyword, 
          \Self.unexpectedBetweenDoKeywordAndBody, 
          \Self.body, 
          \Self.unexpectedBetweenBodyAndCatchClauses, 
          \Self.catchClauses, 
          \Self.unexpectedAfterCatchClauses
        ])
  }
}
