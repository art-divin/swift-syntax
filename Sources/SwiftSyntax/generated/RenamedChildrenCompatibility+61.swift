//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension LayoutRequirementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeType")
  public var unexpectedBeforeTypeIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeType
    }
    set {
      unexpectedBeforeType = newValue
    }
  }
  
  @available(*, deprecated, renamed: "type")
  public var typeIdentifier: TypeSyntax {
    get {
      return type
    }
    set {
      type = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenTypeAndColon")
  public var unexpectedBetweenTypeIdentifierAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenTypeAndColon
    }
    set {
      unexpectedBetweenTypeAndColon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndLayoutSpecifier")
  public var unexpectedBetweenColonAndLayoutConstraint: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndLayoutSpecifier
    }
    set {
      unexpectedBetweenColonAndLayoutSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "layoutSpecifier")
  public var layoutConstraint: TokenSyntax {
    get {
      return layoutSpecifier
    }
    set {
      layoutSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLayoutSpecifierAndLeftParen")
  public var unexpectedBetweenLayoutConstraintAndLeftParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLayoutSpecifierAndLeftParen
    }
    set {
      unexpectedBetweenLayoutSpecifierAndLeftParen = newValue
    }
  }
  
  @available(*, deprecated, renamed: "LayoutRequirementSyntax(leadingTrivia:_:type:_:colon:_:layoutSpecifier:_:leftParen:_:size:_:comma:_:alignment:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeTypeIdentifier: UnexpectedNodesSyntax? = nil,
      typeIdentifier: some TypeSyntaxProtocol,
      _ unexpectedBetweenTypeIdentifierAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndLayoutConstraint: UnexpectedNodesSyntax? = nil,
      layoutConstraint: TokenSyntax,
      _ unexpectedBetweenLayoutConstraintAndLeftParen: UnexpectedNodesSyntax? = nil,
      leftParen: TokenSyntax? = nil,
      _ unexpectedBetweenLeftParenAndSize: UnexpectedNodesSyntax? = nil,
      size: TokenSyntax? = nil,
      _ unexpectedBetweenSizeAndComma: UnexpectedNodesSyntax? = nil,
      comma: TokenSyntax? = nil,
      _ unexpectedBetweenCommaAndAlignment: UnexpectedNodesSyntax? = nil,
      alignment: TokenSyntax? = nil,
      _ unexpectedBetweenAlignmentAndRightParen: UnexpectedNodesSyntax? = nil,
      rightParen: TokenSyntax? = nil,
      _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeTypeIdentifier, 
        type: typeIdentifier, 
        unexpectedBetweenTypeIdentifierAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndLayoutConstraint, 
        layoutSpecifier: layoutConstraint, 
        unexpectedBetweenLayoutConstraintAndLeftParen, 
        leftParen: leftParen, 
        unexpectedBetweenLeftParenAndSize, 
        size: size, 
        unexpectedBetweenSizeAndComma, 
        comma: comma, 
        unexpectedBetweenCommaAndAlignment, 
        alignment: alignment, 
        unexpectedBetweenAlignmentAndRightParen, 
        rightParen: rightParen, 
        unexpectedAfterRightParen, 
        trailingTrivia: trailingTrivia
      )
  }
}
