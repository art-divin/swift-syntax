//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension AttributeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAtSign")
  public var unexpectedBeforeAtSignToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeAtSign
    }
    set {
      unexpectedBeforeAtSign = newValue
    }
  }
  
  @available(*, deprecated, renamed: "atSign")
  public var atSignToken: TokenSyntax {
    get {
      return atSign
    }
    set {
      atSign = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAtSignAndAttributeName")
  public var unexpectedBetweenAtSignTokenAndAttributeName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAtSignAndAttributeName
    }
    set {
      unexpectedBetweenAtSignAndAttributeName = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndArguments")
  public var unexpectedBetweenLeftParenAndArgument: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndArguments
    }
    set {
      unexpectedBetweenLeftParenAndArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "arguments")
  public var argument: Arguments? {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightParen")
  public var unexpectedBetweenArgumentAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndRightParen
    }
    set {
      unexpectedBetweenArgumentsAndRightParen = newValue
    }
  }
  
  @available(*, deprecated, renamed: "AttributeSyntax(leadingTrivia:_:atSign:_:attributeName:_:leftParen:_:arguments:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAtSignToken: UnexpectedNodesSyntax? = nil,
      atSignToken: TokenSyntax = .atSignToken(),
      _ unexpectedBetweenAtSignTokenAndAttributeName: UnexpectedNodesSyntax? = nil,
      attributeName: some TypeSyntaxProtocol,
      _ unexpectedBetweenAttributeNameAndLeftParen: UnexpectedNodesSyntax? = nil,
      leftParen: TokenSyntax? = nil,
      _ unexpectedBetweenLeftParenAndArgument: UnexpectedNodesSyntax? = nil,
      argument: Arguments? = nil,
      _ unexpectedBetweenArgumentAndRightParen: UnexpectedNodesSyntax? = nil,
      rightParen: TokenSyntax? = nil,
      _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAtSignToken, 
        atSign: atSignToken, 
        unexpectedBetweenAtSignTokenAndAttributeName, 
        attributeName: attributeName, 
        unexpectedBetweenAttributeNameAndLeftParen, 
        leftParen: leftParen, 
        unexpectedBetweenLeftParenAndArgument, 
        arguments: argument, 
        unexpectedBetweenArgumentAndRightParen, 
        rightParen: rightParen, 
        unexpectedAfterRightParen, 
        trailingTrivia: trailingTrivia
      )
  }
}
