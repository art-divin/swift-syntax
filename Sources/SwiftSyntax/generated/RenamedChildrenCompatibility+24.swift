//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension DictionaryTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftSquare
    }
    set {
      unexpectedBeforeLeftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "leftSquare")
  public var leftSquareBracket: TokenSyntax {
    get {
      return leftSquare
    }
    set {
      leftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndKey")
  public var unexpectedBetweenLeftSquareBracketAndKeyType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftSquareAndKey
    }
    set {
      unexpectedBetweenLeftSquareAndKey = newValue
    }
  }
  
  @available(*, deprecated, renamed: "key")
  public var keyType: TypeSyntax {
    get {
      return key
    }
    set {
      key = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenKeyAndColon")
  public var unexpectedBetweenKeyTypeAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenKeyAndColon
    }
    set {
      unexpectedBetweenKeyAndColon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndValue")
  public var unexpectedBetweenColonAndValueType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndValue
    }
    set {
      unexpectedBetweenColonAndValue = newValue
    }
  }
  
  @available(*, deprecated, renamed: "value")
  public var valueType: TypeSyntax {
    get {
      return value
    }
    set {
      value = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenValueAndRightSquare")
  public var unexpectedBetweenValueTypeAndRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenValueAndRightSquare
    }
    set {
      unexpectedBetweenValueAndRightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rightSquare")
  public var rightSquareBracket: TokenSyntax {
    get {
      return rightSquare
    }
    set {
      rightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightSquare
    }
    set {
      unexpectedAfterRightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "DictionaryTypeSyntax(leadingTrivia:_:leftSquare:_:key:_:colon:_:value:_:rightSquare:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? = nil,
      leftSquareBracket: TokenSyntax = .leftSquareToken(),
      _ unexpectedBetweenLeftSquareBracketAndKeyType: UnexpectedNodesSyntax? = nil,
      keyType: some TypeSyntaxProtocol,
      _ unexpectedBetweenKeyTypeAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndValueType: UnexpectedNodesSyntax? = nil,
      valueType: some TypeSyntaxProtocol,
      _ unexpectedBetweenValueTypeAndRightSquareBracket: UnexpectedNodesSyntax? = nil,
      rightSquareBracket: TokenSyntax = .rightSquareToken(),
      _ unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftSquareBracket, 
        leftSquare: leftSquareBracket, 
        unexpectedBetweenLeftSquareBracketAndKeyType, 
        key: keyType, 
        unexpectedBetweenKeyTypeAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndValueType, 
        value: valueType, 
        unexpectedBetweenValueTypeAndRightSquareBracket, 
        rightSquare: rightSquareBracket, 
        unexpectedAfterRightSquareBracket, 
        trailingTrivia: trailingTrivia
      )
  }
}
