//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension DynamicReplacementAttributeArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndDeclName")
  public var unexpectedBetweenColonAndDeclname: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndDeclName
    }
    set {
      unexpectedBetweenColonAndDeclName = newValue
    }
  }
  
  @available(*, deprecated, renamed: "declName")
  public var declname: DeclReferenceExprSyntax {
    get {
      return declName
    }
    set {
      declName = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterDeclName")
  public var unexpectedAfterDeclname: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterDeclName
    }
    set {
      unexpectedAfterDeclName = newValue
    }
  }
  
  @available(*, deprecated, renamed: "DynamicReplacementAttributeArgumentsSyntax(leadingTrivia:_:forLabel:_:colon:_:declName:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeForLabel: UnexpectedNodesSyntax? = nil,
      forLabel: TokenSyntax = .keyword(.for),
      _ unexpectedBetweenForLabelAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndDeclname: UnexpectedNodesSyntax? = nil,
      declname: DeclReferenceExprSyntax,
      _ unexpectedAfterDeclname: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeForLabel, 
        forLabel: forLabel, 
        unexpectedBetweenForLabelAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndDeclname, 
        declName: declname, 
        unexpectedAfterDeclname, 
        trailingTrivia: trailingTrivia
      )
  }
}
