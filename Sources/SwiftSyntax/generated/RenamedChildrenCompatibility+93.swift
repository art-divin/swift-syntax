//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension StringLiteralExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeOpeningPounds")
  public var unexpectedBeforeOpenDelimiter: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeOpeningPounds
    }
    set {
      unexpectedBeforeOpeningPounds = newValue
    }
  }
  
  @available(*, deprecated, renamed: "openingPounds")
  public var openDelimiter: TokenSyntax? {
    get {
      return openingPounds
    }
    set {
      openingPounds = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenOpeningPoundsAndOpeningQuote")
  public var unexpectedBetweenOpenDelimiterAndOpenQuote: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenOpeningPoundsAndOpeningQuote
    }
    set {
      unexpectedBetweenOpeningPoundsAndOpeningQuote = newValue
    }
  }
  
  @available(*, deprecated, renamed: "openingQuote")
  public var openQuote: TokenSyntax {
    get {
      return openingQuote
    }
    set {
      openingQuote = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenOpeningQuoteAndSegments")
  public var unexpectedBetweenOpenQuoteAndSegments: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenOpeningQuoteAndSegments
    }
    set {
      unexpectedBetweenOpeningQuoteAndSegments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenSegmentsAndClosingQuote")
  public var unexpectedBetweenSegmentsAndCloseQuote: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenSegmentsAndClosingQuote
    }
    set {
      unexpectedBetweenSegmentsAndClosingQuote = newValue
    }
  }
  
  @available(*, deprecated, renamed: "closingQuote")
  public var closeQuote: TokenSyntax {
    get {
      return closingQuote
    }
    set {
      closingQuote = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenClosingQuoteAndClosingPounds")
  public var unexpectedBetweenCloseQuoteAndCloseDelimiter: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenClosingQuoteAndClosingPounds
    }
    set {
      unexpectedBetweenClosingQuoteAndClosingPounds = newValue
    }
  }
  
  @available(*, deprecated, renamed: "closingPounds")
  public var closeDelimiter: TokenSyntax? {
    get {
      return closingPounds
    }
    set {
      closingPounds = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterClosingPounds")
  public var unexpectedAfterCloseDelimiter: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterClosingPounds
    }
    set {
      unexpectedAfterClosingPounds = newValue
    }
  }
  
  @available(*, deprecated, renamed: "StringLiteralExprSyntax(leadingTrivia:_:openingPounds:_:openingQuote:_:segments:_:closingQuote:_:closingPounds:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeOpenDelimiter: UnexpectedNodesSyntax? = nil,
      openDelimiter: TokenSyntax? = nil,
      _ unexpectedBetweenOpenDelimiterAndOpenQuote: UnexpectedNodesSyntax? = nil,
      openQuote: TokenSyntax,
      _ unexpectedBetweenOpenQuoteAndSegments: UnexpectedNodesSyntax? = nil,
      segments: StringLiteralSegmentListSyntax,
      _ unexpectedBetweenSegmentsAndCloseQuote: UnexpectedNodesSyntax? = nil,
      closeQuote: TokenSyntax,
      _ unexpectedBetweenCloseQuoteAndCloseDelimiter: UnexpectedNodesSyntax? = nil,
      closeDelimiter: TokenSyntax? = nil,
      _ unexpectedAfterCloseDelimiter: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeOpenDelimiter, 
        openingPounds: openDelimiter, 
        unexpectedBetweenOpenDelimiterAndOpenQuote, 
        openingQuote: openQuote, 
        unexpectedBetweenOpenQuoteAndSegments, 
        segments: segments, 
        unexpectedBetweenSegmentsAndCloseQuote, 
        closingQuote: closeQuote, 
        unexpectedBetweenCloseQuoteAndCloseDelimiter, 
        closingPounds: closeDelimiter, 
        unexpectedAfterCloseDelimiter, 
        trailingTrivia: trailingTrivia
      )
  }
}
