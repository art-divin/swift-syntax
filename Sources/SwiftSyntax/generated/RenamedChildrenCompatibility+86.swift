//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension RegexLiteralExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenOpeningPoundsAndOpeningSlash")
  public var unexpectedBetweenOpeningPoundsAndOpenSlash: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenOpeningPoundsAndOpeningSlash
    }
    set {
      unexpectedBetweenOpeningPoundsAndOpeningSlash = newValue
    }
  }
  
  @available(*, deprecated, renamed: "openingSlash")
  public var openSlash: TokenSyntax {
    get {
      return openingSlash
    }
    set {
      openingSlash = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenOpeningSlashAndRegex")
  public var unexpectedBetweenOpenSlashAndRegexPattern: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenOpeningSlashAndRegex
    }
    set {
      unexpectedBetweenOpeningSlashAndRegex = newValue
    }
  }
  
  @available(*, deprecated, renamed: "regex")
  public var regexPattern: TokenSyntax {
    get {
      return regex
    }
    set {
      regex = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenRegexAndClosingSlash")
  public var unexpectedBetweenRegexPatternAndCloseSlash: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenRegexAndClosingSlash
    }
    set {
      unexpectedBetweenRegexAndClosingSlash = newValue
    }
  }
  
  @available(*, deprecated, renamed: "closingSlash")
  public var closeSlash: TokenSyntax {
    get {
      return closingSlash
    }
    set {
      closingSlash = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenClosingSlashAndClosingPounds")
  public var unexpectedBetweenCloseSlashAndClosingPounds: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenClosingSlashAndClosingPounds
    }
    set {
      unexpectedBetweenClosingSlashAndClosingPounds = newValue
    }
  }
  
  @available(*, deprecated, renamed: "RegexLiteralExprSyntax(leadingTrivia:_:openingPounds:_:openingSlash:_:regex:_:closingSlash:_:closingPounds:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeOpeningPounds: UnexpectedNodesSyntax? = nil,
      openingPounds: TokenSyntax? = nil,
      _ unexpectedBetweenOpeningPoundsAndOpenSlash: UnexpectedNodesSyntax? = nil,
      openSlash: TokenSyntax = .regexSlashToken(),
      _ unexpectedBetweenOpenSlashAndRegexPattern: UnexpectedNodesSyntax? = nil,
      regexPattern: TokenSyntax,
      _ unexpectedBetweenRegexPatternAndCloseSlash: UnexpectedNodesSyntax? = nil,
      closeSlash: TokenSyntax = .regexSlashToken(),
      _ unexpectedBetweenCloseSlashAndClosingPounds: UnexpectedNodesSyntax? = nil,
      closingPounds: TokenSyntax? = nil,
      _ unexpectedAfterClosingPounds: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeOpeningPounds, 
        openingPounds: openingPounds, 
        unexpectedBetweenOpeningPoundsAndOpenSlash, 
        openingSlash: openSlash, 
        unexpectedBetweenOpenSlashAndRegexPattern, 
        regex: regexPattern, 
        unexpectedBetweenRegexPatternAndCloseSlash, 
        closingSlash: closeSlash, 
        unexpectedBetweenCloseSlashAndClosingPounds, 
        closingPounds: closingPounds, 
        unexpectedAfterClosingPounds, 
        trailingTrivia: trailingTrivia
      )
  }
}
