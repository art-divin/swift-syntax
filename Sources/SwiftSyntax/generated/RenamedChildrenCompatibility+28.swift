//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension DifferentiableAttributeArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeKindSpecifier")
  public var unexpectedBeforeDiffKind: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeKindSpecifier
    }
    set {
      unexpectedBeforeKindSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "kindSpecifier")
  public var diffKind: TokenSyntax? {
    get {
      return kindSpecifier
    }
    set {
      kindSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenKindSpecifierAndKindSpecifierComma")
  public var unexpectedBetweenDiffKindAndDiffKindComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenKindSpecifierAndKindSpecifierComma
    }
    set {
      unexpectedBetweenKindSpecifierAndKindSpecifierComma = newValue
    }
  }
  
  @available(*, deprecated, renamed: "kindSpecifierComma")
  public var diffKindComma: TokenSyntax? {
    get {
      return kindSpecifierComma
    }
    set {
      kindSpecifierComma = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenKindSpecifierCommaAndArguments")
  public var unexpectedBetweenDiffKindCommaAndDiffParams: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenKindSpecifierCommaAndArguments
    }
    set {
      unexpectedBetweenKindSpecifierCommaAndArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "arguments")
  public var diffParams: DifferentiabilityWithRespectToArgumentSyntax? {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndArgumentsComma")
  public var unexpectedBetweenDiffParamsAndDiffParamsComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndArgumentsComma
    }
    set {
      unexpectedBetweenArgumentsAndArgumentsComma = newValue
    }
  }
  
  @available(*, deprecated, renamed: "argumentsComma")
  public var diffParamsComma: TokenSyntax? {
    get {
      return argumentsComma
    }
    set {
      argumentsComma = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsCommaAndGenericWhereClause")
  public var unexpectedBetweenDiffParamsCommaAndWhereClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsCommaAndGenericWhereClause
    }
    set {
      unexpectedBetweenArgumentsCommaAndGenericWhereClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "genericWhereClause")
  public var whereClause: GenericWhereClauseSyntax? {
    get {
      return genericWhereClause
    }
    set {
      genericWhereClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterGenericWhereClause")
  public var unexpectedAfterWhereClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterGenericWhereClause
    }
    set {
      unexpectedAfterGenericWhereClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "DifferentiableAttributeArgumentsSyntax(leadingTrivia:_:kindSpecifier:_:kindSpecifierComma:_:arguments:_:argumentsComma:_:genericWhereClause:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeDiffKind: UnexpectedNodesSyntax? = nil,
      diffKind: TokenSyntax? = nil,
      _ unexpectedBetweenDiffKindAndDiffKindComma: UnexpectedNodesSyntax? = nil,
      diffKindComma: TokenSyntax? = nil,
      _ unexpectedBetweenDiffKindCommaAndDiffParams: UnexpectedNodesSyntax? = nil,
      diffParams: DifferentiabilityWithRespectToArgumentSyntax? = nil,
      _ unexpectedBetweenDiffParamsAndDiffParamsComma: UnexpectedNodesSyntax? = nil,
      diffParamsComma: TokenSyntax? = nil,
      _ unexpectedBetweenDiffParamsCommaAndWhereClause: UnexpectedNodesSyntax? = nil,
      whereClause: GenericWhereClauseSyntax? = nil,
      _ unexpectedAfterWhereClause: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeDiffKind, 
        kindSpecifier: diffKind, 
        unexpectedBetweenDiffKindAndDiffKindComma, 
        kindSpecifierComma: diffKindComma, 
        unexpectedBetweenDiffKindCommaAndDiffParams, 
        arguments: diffParams, 
        unexpectedBetweenDiffParamsAndDiffParamsComma, 
        argumentsComma: diffParamsComma, 
        unexpectedBetweenDiffParamsCommaAndWhereClause, 
        genericWhereClause: whereClause, 
        unexpectedAfterWhereClause, 
        trailingTrivia: trailingTrivia
      )
  }
}
