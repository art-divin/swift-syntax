//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension WhereClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenWhereKeywordAndCondition")
  public var unexpectedBetweenWhereKeywordAndGuardResult: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenWhereKeywordAndCondition
    }
    set {
      unexpectedBetweenWhereKeywordAndCondition = newValue
    }
  }
  
  @available(*, deprecated, renamed: "condition")
  public var guardResult: ExprSyntax {
    get {
      return condition
    }
    set {
      condition = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterCondition")
  public var unexpectedAfterGuardResult: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterCondition
    }
    set {
      unexpectedAfterCondition = newValue
    }
  }
  
  @available(*, deprecated, renamed: "WhereClauseSyntax(leadingTrivia:_:whereKeyword:_:condition:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeWhereKeyword: UnexpectedNodesSyntax? = nil,
      whereKeyword: TokenSyntax = .keyword(.where),
      _ unexpectedBetweenWhereKeywordAndGuardResult: UnexpectedNodesSyntax? = nil,
      guardResult: some ExprSyntaxProtocol,
      _ unexpectedAfterGuardResult: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeWhereKeyword, 
        whereKeyword: whereKeyword, 
        unexpectedBetweenWhereKeywordAndGuardResult, 
        condition: guardResult, 
        unexpectedAfterGuardResult, 
        trailingTrivia: trailingTrivia
      )
  }
}
