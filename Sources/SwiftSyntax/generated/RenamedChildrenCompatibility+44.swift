//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension FunctionTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndParameters")
  public var unexpectedBetweenLeftParenAndArguments: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndParameters
    }
    set {
      unexpectedBetweenLeftParenAndParameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "parameters")
  public var arguments: TupleTypeElementListSyntax {
    get {
      return parameters
    }
    set {
      parameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "addParameter")
  public func addArgument(_ element: TupleTypeElementSyntax) -> FunctionTypeSyntax {
    return addParameter(element)
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndRightParen")
  public var unexpectedBetweenArgumentsAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParametersAndRightParen
    }
    set {
      unexpectedBetweenParametersAndRightParen = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenEffectSpecifiersAndReturnClause")
  public var unexpectedBetweenEffectSpecifiersAndOutput: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenEffectSpecifiersAndReturnClause
    }
    set {
      unexpectedBetweenEffectSpecifiersAndReturnClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "returnClause")
  public var output: ReturnClauseSyntax {
    get {
      return returnClause
    }
    set {
      returnClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterReturnClause")
  public var unexpectedAfterOutput: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterReturnClause
    }
    set {
      unexpectedAfterReturnClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "FunctionTypeSyntax(leadingTrivia:_:leftParen:_:parameters:_:rightParen:_:effectSpecifiers:_:returnClause:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftParen: UnexpectedNodesSyntax? = nil,
      leftParen: TokenSyntax = .leftParenToken(),
      _ unexpectedBetweenLeftParenAndArguments: UnexpectedNodesSyntax? = nil,
      arguments: TupleTypeElementListSyntax,
      _ unexpectedBetweenArgumentsAndRightParen: UnexpectedNodesSyntax? = nil,
      rightParen: TokenSyntax = .rightParenToken(),
      _ unexpectedBetweenRightParenAndEffectSpecifiers: UnexpectedNodesSyntax? = nil,
      effectSpecifiers: TypeEffectSpecifiersSyntax? = nil,
      _ unexpectedBetweenEffectSpecifiersAndOutput: UnexpectedNodesSyntax? = nil,
      output: ReturnClauseSyntax,
      _ unexpectedAfterOutput: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftParen, 
        leftParen: leftParen, 
        unexpectedBetweenLeftParenAndArguments, 
        parameters: arguments, 
        unexpectedBetweenArgumentsAndRightParen, 
        rightParen: rightParen, 
        unexpectedBetweenRightParenAndEffectSpecifiers, 
        effectSpecifiers: effectSpecifiers, 
        unexpectedBetweenEffectSpecifiersAndOutput, 
        returnClause: output, 
        unexpectedAfterOutput, 
        trailingTrivia: trailingTrivia
      )
  }
}
