//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension IsExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenExpressionAndIsKeyword")
  public var unexpectedBetweenExpressionAndIsTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenExpressionAndIsKeyword
    }
    set {
      unexpectedBetweenExpressionAndIsKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "isKeyword")
  public var isTok: TokenSyntax {
    get {
      return isKeyword
    }
    set {
      isKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenIsKeywordAndType")
  public var unexpectedBetweenIsTokAndTypeName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenIsKeywordAndType
    }
    set {
      unexpectedBetweenIsKeywordAndType = newValue
    }
  }
  
  @available(*, deprecated, renamed: "type")
  public var typeName: TypeSyntax {
    get {
      return type
    }
    set {
      type = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterType")
  public var unexpectedAfterTypeName: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterType
    }
    set {
      unexpectedAfterType = newValue
    }
  }
  
  @available(*, deprecated, renamed: "IsExprSyntax(leadingTrivia:_:expression:_:isKeyword:_:type:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeExpression: UnexpectedNodesSyntax? = nil,
      expression: some ExprSyntaxProtocol,
      _ unexpectedBetweenExpressionAndIsTok: UnexpectedNodesSyntax? = nil,
      isTok: TokenSyntax = .keyword(.is),
      _ unexpectedBetweenIsTokAndTypeName: UnexpectedNodesSyntax? = nil,
      typeName: some TypeSyntaxProtocol,
      _ unexpectedAfterTypeName: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeExpression, 
        expression: expression, 
        unexpectedBetweenExpressionAndIsTok, 
        isKeyword: isTok, 
        unexpectedBetweenIsTokAndTypeName, 
        type: typeName, 
        unexpectedAfterTypeName, 
        trailingTrivia: trailingTrivia
      )
  }
}
