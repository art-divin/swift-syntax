//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension SpecializeAvailabilityArgumentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAvailabilityLabel")
  public var unexpectedBeforeLabel: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeAvailabilityLabel
    }
    set {
      unexpectedBeforeAvailabilityLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "availabilityLabel")
  public var label: TokenSyntax {
    get {
      return availabilityLabel
    }
    set {
      availabilityLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAvailabilityLabelAndColon")
  public var unexpectedBetweenLabelAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAvailabilityLabelAndColon
    }
    set {
      unexpectedBetweenAvailabilityLabelAndColon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndAvailabilityArguments")
  public var unexpectedBetweenColonAndAvailabilityList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndAvailabilityArguments
    }
    set {
      unexpectedBetweenColonAndAvailabilityArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "availabilityArguments")
  public var availabilityList: AvailabilityArgumentListSyntax {
    get {
      return availabilityArguments
    }
    set {
      availabilityArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "addAvailabilityArgument")
  public func addAvailability(_ element: AvailabilityArgumentSyntax) -> SpecializeAvailabilityArgumentSyntax {
    return addAvailabilityArgument(element)
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAvailabilityArgumentsAndSemicolon")
  public var unexpectedBetweenAvailabilityListAndSemicolon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAvailabilityArgumentsAndSemicolon
    }
    set {
      unexpectedBetweenAvailabilityArgumentsAndSemicolon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "SpecializeAvailabilityArgumentSyntax(leadingTrivia:_:availabilityLabel:_:colon:_:availabilityArguments:_:semicolon:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLabel: UnexpectedNodesSyntax? = nil,
      label: TokenSyntax = .keyword(.availability),
      _ unexpectedBetweenLabelAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndAvailabilityList: UnexpectedNodesSyntax? = nil,
      availabilityList: AvailabilityArgumentListSyntax,
      _ unexpectedBetweenAvailabilityListAndSemicolon: UnexpectedNodesSyntax? = nil,
      semicolon: TokenSyntax = .semicolonToken(),
      _ unexpectedAfterSemicolon: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLabel, 
        availabilityLabel: label, 
        unexpectedBetweenLabelAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndAvailabilityList, 
        availabilityArguments: availabilityList, 
        unexpectedBetweenAvailabilityListAndSemicolon, 
        semicolon: semicolon, 
        unexpectedAfterSemicolon, 
        trailingTrivia: trailingTrivia
      )
  }
}
