//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension SubscriptCallExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenCalledExpressionAndLeftSquare")
  public var unexpectedBetweenCalledExpressionAndLeftBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenCalledExpressionAndLeftSquare
    }
    set {
      unexpectedBetweenCalledExpressionAndLeftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "leftSquare")
  public var leftBracket: TokenSyntax {
    get {
      return leftSquare
    }
    set {
      leftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndArguments")
  public var unexpectedBetweenLeftBracketAndArgumentList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftSquareAndArguments
    }
    set {
      unexpectedBetweenLeftSquareAndArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "arguments")
  public var argumentList: LabeledExprListSyntax {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightSquare")
  public var unexpectedBetweenArgumentListAndRightBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndRightSquare
    }
    set {
      unexpectedBetweenArgumentsAndRightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rightSquare")
  public var rightBracket: TokenSyntax {
    get {
      return rightSquare
    }
    set {
      rightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenRightSquareAndTrailingClosure")
  public var unexpectedBetweenRightBracketAndTrailingClosure: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenRightSquareAndTrailingClosure
    }
    set {
      unexpectedBetweenRightSquareAndTrailingClosure = newValue
    }
  }
  
  @available(*, deprecated, renamed: "SubscriptCallExprSyntax(leadingTrivia:_:calledExpression:_:leftSquare:_:arguments:_:rightSquare:_:trailingClosure:_:additionalTrailingClosures:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeCalledExpression: UnexpectedNodesSyntax? = nil,
      calledExpression: some ExprSyntaxProtocol,
      _ unexpectedBetweenCalledExpressionAndLeftBracket: UnexpectedNodesSyntax? = nil,
      leftBracket: TokenSyntax = .leftSquareToken(),
      _ unexpectedBetweenLeftBracketAndArgumentList: UnexpectedNodesSyntax? = nil,
      argumentList: LabeledExprListSyntax,
      _ unexpectedBetweenArgumentListAndRightBracket: UnexpectedNodesSyntax? = nil,
      rightBracket: TokenSyntax = .rightSquareToken(),
      _ unexpectedBetweenRightBracketAndTrailingClosure: UnexpectedNodesSyntax? = nil,
      trailingClosure: ClosureExprSyntax? = nil,
      _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
      additionalTrailingClosures: MultipleTrailingClosureElementListSyntax = [],
      _ unexpectedAfterAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeCalledExpression, 
        calledExpression: calledExpression, 
        unexpectedBetweenCalledExpressionAndLeftBracket, 
        leftSquare: leftBracket, 
        unexpectedBetweenLeftBracketAndArgumentList, 
        arguments: argumentList, 
        unexpectedBetweenArgumentListAndRightBracket, 
        rightSquare: rightBracket, 
        unexpectedBetweenRightBracketAndTrailingClosure, 
        trailingClosure: trailingClosure, 
        unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures, 
        additionalTrailingClosures: additionalTrailingClosures, 
        unexpectedAfterAdditionalTrailingClosures, 
        trailingTrivia: trailingTrivia
      )
  }
}
