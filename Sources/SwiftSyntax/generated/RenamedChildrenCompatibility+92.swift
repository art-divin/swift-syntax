//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension SpecializeTargetFunctionArgumentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeTargetLabel")
  public var unexpectedBeforeLabel: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeTargetLabel
    }
    set {
      unexpectedBeforeTargetLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "targetLabel")
  public var label: TokenSyntax {
    get {
      return targetLabel
    }
    set {
      targetLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenTargetLabelAndColon")
  public var unexpectedBetweenLabelAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenTargetLabelAndColon
    }
    set {
      unexpectedBetweenTargetLabelAndColon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndDeclName")
  public var unexpectedBetweenColonAndDeclname: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndDeclName
    }
    set {
      unexpectedBetweenColonAndDeclName = newValue
    }
  }
  
  @available(*, deprecated, renamed: "declName")
  public var declname: DeclReferenceExprSyntax {
    get {
      return declName
    }
    set {
      declName = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenDeclNameAndTrailingComma")
  public var unexpectedBetweenDeclnameAndTrailingComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenDeclNameAndTrailingComma
    }
    set {
      unexpectedBetweenDeclNameAndTrailingComma = newValue
    }
  }
  
  @available(*, deprecated, renamed: "SpecializeTargetFunctionArgumentSyntax(leadingTrivia:_:targetLabel:_:colon:_:declName:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLabel: UnexpectedNodesSyntax? = nil,
      label: TokenSyntax = .keyword(.target),
      _ unexpectedBetweenLabelAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndDeclname: UnexpectedNodesSyntax? = nil,
      declname: DeclReferenceExprSyntax,
      _ unexpectedBetweenDeclnameAndTrailingComma: UnexpectedNodesSyntax? = nil,
      trailingComma: TokenSyntax? = nil,
      _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLabel, 
        targetLabel: label, 
        unexpectedBetweenLabelAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndDeclname, 
        declName: declname, 
        unexpectedBetweenDeclnameAndTrailingComma, 
        trailingComma: trailingComma, 
        unexpectedAfterTrailingComma, 
        trailingTrivia: trailingTrivia
      )
  }
}
