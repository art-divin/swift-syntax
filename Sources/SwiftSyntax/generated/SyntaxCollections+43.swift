//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

/// ### Children
/// 
/// (``SwitchCaseSyntax`` | ``IfConfigDeclSyntax``) `*`
///
/// ### Contained in
/// 
///  - ``IfConfigClauseSyntax``.``IfConfigClauseSyntax/elements``
///  - ``SwitchExprSyntax``.``SwitchExprSyntax/cases``
public struct SwitchCaseListSyntax: SyntaxCollection, SyntaxHashable {
  public enum Element: SyntaxChildChoices, SyntaxHashable {
    case `switchCase`(SwitchCaseSyntax)
    case `ifConfigDecl`(IfConfigDeclSyntax)
    
    public var _syntaxNode: Syntax {
      switch self {
      case .switchCase(let node):
        return node._syntaxNode
      case .ifConfigDecl(let node):
        return node._syntaxNode
      }
    }
    
    public init(_ node: SwitchCaseSyntax) {
      self = .switchCase(node)
    }
    
    public init(_ node: IfConfigDeclSyntax) {
      self = .ifConfigDecl(node)
    }
    
    public init?(_ node: some SyntaxProtocol) {
      if let node = node.as(SwitchCaseSyntax.self) {
        self = .switchCase(node)
        return
      }
      if let node = node.as(IfConfigDeclSyntax.self) {
        self = .ifConfigDecl(node)
        return
      }
      return nil
    }
    
    public static var structure: SyntaxNodeStructure {
      return .choices([
          .node(SwitchCaseSyntax.self),
          .node(IfConfigDeclSyntax.self)])
    }
    
    /// Checks if the current syntax node can be cast to ``SwitchCaseSyntax``.
    ///
    /// - Returns: `true` if the node can be cast, `false` otherwise.
    public func `is`(_ syntaxType: SwitchCaseSyntax.Type) -> Bool {
      return self.as(syntaxType) != nil
    }
    
    /// Attempts to cast the current syntax node to ``SwitchCaseSyntax``.
    ///
    /// - Returns: An instance of ``SwitchCaseSyntax``, or `nil` if the cast fails.
    public func `as`(_ syntaxType: SwitchCaseSyntax.Type) -> SwitchCaseSyntax? {
      return SwitchCaseSyntax.init(self)
    }
    
    /// Force-casts the current syntax node to ``SwitchCaseSyntax``.
    ///
    /// - Returns: An instance of ``SwitchCaseSyntax``.
    /// - Warning: This function will crash if the cast is not possible. Use `as` to safely attempt a cast.
    public func cast(_ syntaxType: SwitchCaseSyntax.Type) -> SwitchCaseSyntax {
      return self.as(SwitchCaseSyntax.self)!
    }
    
    /// Checks if the current syntax node can be cast to ``IfConfigDeclSyntax``.
    ///
    /// - Returns: `true` if the node can be cast, `false` otherwise.
    public func `is`(_ syntaxType: IfConfigDeclSyntax.Type) -> Bool {
      return self.as(syntaxType) != nil
    }
    
    /// Attempts to cast the current syntax node to ``IfConfigDeclSyntax``.
    ///
    /// - Returns: An instance of ``IfConfigDeclSyntax``, or `nil` if the cast fails.
    public func `as`(_ syntaxType: IfConfigDeclSyntax.Type) -> IfConfigDeclSyntax? {
      return IfConfigDeclSyntax.init(self)
    }
    
    /// Force-casts the current syntax node to ``IfConfigDeclSyntax``.
    ///
    /// - Returns: An instance of ``IfConfigDeclSyntax``.
    /// - Warning: This function will crash if the cast is not possible. Use `as` to safely attempt a cast.
    public func cast(_ syntaxType: IfConfigDeclSyntax.Type) -> IfConfigDeclSyntax {
      return self.as(IfConfigDeclSyntax.self)!
    }
  }
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .switchCaseList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.switchCaseList
}
