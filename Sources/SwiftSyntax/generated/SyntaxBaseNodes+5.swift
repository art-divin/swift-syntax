//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

// MARK: - Syntax

extension Syntax {
  public static var structure: SyntaxNodeStructure {
    let retVal: [SyntaxNodeStructure.SyntaxChoice]
     = [
          SyntaxNodeStructure.SyntaxChoice.node(TokenSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AccessorBlockSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AccessorDeclListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AccessorDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AccessorEffectSpecifiersSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AccessorParametersSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ActorDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ArrayElementListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ArrayElementSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ArrayExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ArrayTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ArrowExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AsExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AssignmentExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AssociatedTypeDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AttributeListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AttributeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AttributedTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AvailabilityArgumentListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AvailabilityArgumentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AvailabilityConditionSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AvailabilityLabeledArgumentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(AwaitExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(BackDeployedAttributeArgumentsSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(BinaryOperatorExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(BooleanLiteralExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(BorrowExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(BreakStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(CanImportExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(CanImportVersionInfoSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(CatchClauseListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(CatchClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(CatchItemListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(CatchItemSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ClassDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ClassRestrictionTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ClosureCaptureClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ClosureCaptureListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ClosureCaptureSpecifierSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ClosureCaptureSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ClosureExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ClosureParameterClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ClosureParameterListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ClosureParameterSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ClosureShorthandParameterListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ClosureShorthandParameterSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ClosureSignatureSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(CodeBlockItemListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(CodeBlockItemSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(CodeBlockSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(CompositionTypeElementListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(CompositionTypeElementSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(CompositionTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ConditionElementListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ConditionElementSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ConformanceRequirementSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ConsumeExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ContinueStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ConventionAttributeArgumentsSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ConventionWitnessMethodAttributeArgumentsSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(CopyExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DeclModifierDetailSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DeclModifierListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DeclModifierSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DeclNameArgumentListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DeclNameArgumentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DeclNameArgumentsSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DeclReferenceExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DeferStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DeinitializerDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DeinitializerEffectSpecifiersSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DerivativeAttributeArgumentsSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DesignatedTypeListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DesignatedTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DictionaryElementListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DictionaryElementSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DictionaryExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DictionaryTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DifferentiabilityArgumentListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DifferentiabilityArgumentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DifferentiabilityArgumentsSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DifferentiabilityWithRespectToArgumentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DifferentiableAttributeArgumentsSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DiscardAssignmentExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DiscardStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DoExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DoStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DocumentationAttributeArgumentListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DocumentationAttributeArgumentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(DynamicReplacementAttributeArgumentsSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(EditorPlaceholderDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(EditorPlaceholderExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(EffectsAttributeArgumentListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(EnumCaseDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(EnumCaseElementListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(EnumCaseElementSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(EnumCaseParameterClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(EnumCaseParameterListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(EnumCaseParameterSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(EnumDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ExposeAttributeArgumentsSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ExprListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ExpressionPatternSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ExpressionSegmentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ExpressionStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ExtensionDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(FallThroughStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(FloatLiteralExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ForStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ForceUnwrapExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(FunctionCallExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(FunctionDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(FunctionEffectSpecifiersSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(FunctionParameterClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(FunctionParameterListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(FunctionParameterSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(FunctionSignatureSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(FunctionTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(GenericArgumentClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(GenericArgumentListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(GenericArgumentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(GenericParameterClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(GenericParameterListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(GenericParameterSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(GenericRequirementListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(GenericRequirementSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(GenericSpecializationExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(GenericWhereClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(GuardStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(IdentifierPatternSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(IdentifierTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(IfConfigClauseListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(IfConfigClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(IfConfigDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(IfExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ImplementsAttributeArgumentsSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ImplicitlyUnwrappedOptionalTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ImportDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ImportPathComponentListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ImportPathComponentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(InOutExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(InfixOperatorExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(InheritanceClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(InheritedTypeListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(InheritedTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(InitializerClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(InitializerDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(IntegerLiteralExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(IsExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(IsTypePatternSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(KeyPathComponentListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(KeyPathComponentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(KeyPathExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(KeyPathOptionalComponentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(KeyPathPropertyComponentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(KeyPathSubscriptComponentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(LabeledExprListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(LabeledExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(LabeledSpecializeArgumentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(LabeledStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(LayoutRequirementSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MacroDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MacroExpansionDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MacroExpansionExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MatchingPatternConditionSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MemberAccessExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MemberBlockItemListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MemberBlockItemSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MemberBlockSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MemberTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MetatypeTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MissingDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MissingExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MissingPatternSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MissingStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MissingSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MissingTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MultipleTrailingClosureElementListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(MultipleTrailingClosureElementSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(NamedOpaqueReturnTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(NilLiteralExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ObjCSelectorPieceListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ObjCSelectorPieceSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(OpaqueReturnTypeOfAttributeArgumentsSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(OperatorDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(OperatorPrecedenceAndTypesSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(OptionalBindingConditionSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(OptionalChainingExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(OptionalTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(OriginallyDefinedInAttributeArgumentsSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PackElementExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PackElementTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PackExpansionExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PackExpansionTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PatternBindingListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PatternBindingSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PatternExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PlatformVersionItemListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PlatformVersionItemSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PlatformVersionSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PostfixIfConfigExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PostfixOperatorExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PoundSourceLocationArgumentsSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PoundSourceLocationSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PrecedenceGroupAssignmentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PrecedenceGroupAssociativitySyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PrecedenceGroupAttributeListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PrecedenceGroupDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PrecedenceGroupNameListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PrecedenceGroupNameSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PrecedenceGroupRelationSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PrefixOperatorExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PrimaryAssociatedTypeClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PrimaryAssociatedTypeListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(PrimaryAssociatedTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ProtocolDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(RegexLiteralExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(RepeatStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ReturnClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ReturnStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SameTypeRequirementSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SequenceExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SimpleStringLiteralExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SimpleStringLiteralSegmentListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SomeOrAnyTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SourceFileSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SpecializeAttributeArgumentListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SpecializeAvailabilityArgumentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SpecializeTargetFunctionArgumentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(StringLiteralExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(StringLiteralSegmentListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(StringSegmentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(StructDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SubscriptCallExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SubscriptDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SuperExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SuppressedTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SwitchCaseItemListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SwitchCaseItemSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SwitchCaseLabelSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SwitchCaseListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SwitchCaseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SwitchDefaultLabelSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(SwitchExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(TernaryExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ThenStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ThrowStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ThrownTypeClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(TryExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(TupleExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(TuplePatternElementListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(TuplePatternElementSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(TuplePatternSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(TupleTypeElementListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(TupleTypeElementSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(TupleTypeSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(TypeAliasDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(TypeAnnotationSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(TypeEffectSpecifiersSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(TypeExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(TypeInitializerClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(UnavailableFromAsyncAttributeArgumentsSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(UnderscorePrivateAttributeArgumentsSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(UnexpectedNodesSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(UnresolvedAsExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(UnresolvedIsExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(UnresolvedTernaryExprSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(ValueBindingPatternSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(VariableDeclSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(VersionComponentListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(VersionComponentSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(VersionTupleSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(WhereClauseSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(WhileStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(WildcardPatternSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(YieldStmtSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(YieldedExpressionListSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(YieldedExpressionSyntax.self),
          SyntaxNodeStructure.SyntaxChoice.node(YieldedExpressionsClauseSyntax.self)
        ]
    return SyntaxNodeStructure.choices(retVal)
  }
}

/// Protocol that syntax nodes conform to if they don't have any semantic subtypes.
/// These are syntax nodes that are not considered base nodes for other syntax types.
///
/// Syntax nodes conforming to this protocol have their inherited casting methods
/// deprecated to prevent incorrect casting.
public protocol _LeafSyntaxNodeProtocol: SyntaxProtocol {}

public extension _LeafSyntaxNodeProtocol {
  /// Checks if the current leaf syntax node can be cast to a different specified type.
  ///
  /// - Returns: `false` since the leaf node cannot be cast to a different specified type.
  ///
  /// - Note: This method overloads the general `is` method and is marked as deprecated to produce a warning,
  ///         informing the user that the cast will always fail.
  @available(*, deprecated, message: "This cast will always fail")
  func `is`<S: SyntaxProtocol>(_ syntaxType: S.Type) -> Bool {
    return false
  }
  

  /// Attempts to cast the current leaf syntax node to a different specified type.
  ///
  /// - Returns: `nil` since the leaf node cannot be cast to a different specified type.
  ///
  /// - Note: This method overloads the general `as` method and is marked as deprecated to produce a warning,
  ///         informing the user that the cast will always fail.
  @available(*, deprecated, message: "This cast will always fail")
  func `as`<S: SyntaxProtocol>(_ syntaxType: S.Type) -> S? {
    return nil
  }
  

  /// Force-casts the current leaf syntax node to a different specified type.
  ///
  /// - Returns: This method will always trigger a runtime crash and never return.
  ///
  /// - Note: This method overloads the general `cast` method and is marked as deprecated to produce a warning,
  ///         informing the user that the cast will always fail.
  /// - Warning: Invoking this method will lead to a fatal error.
  @available(*, deprecated, message: "This cast will always fail")
  func cast<S: SyntaxProtocol>(_ syntaxType: S.Type) -> S {
    fatalError("\(Self.self) cannot be cast to \(S.self)")
  }
}
