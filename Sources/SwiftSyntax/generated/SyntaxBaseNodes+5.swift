//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

// MARK: - Syntax

extension Syntax {
  public static var structure: SyntaxNodeStructure {
    return .choices([
          .node(TokenSyntax.self),
          .node(AccessorBlockSyntax.self),
          .node(AccessorDeclListSyntax.self),
          .node(AccessorDeclSyntax.self),
          .node(AccessorEffectSpecifiersSyntax.self),
          .node(AccessorParametersSyntax.self),
          .node(ActorDeclSyntax.self),
          .node(ArrayElementListSyntax.self),
          .node(ArrayElementSyntax.self),
          .node(ArrayExprSyntax.self),
          .node(ArrayTypeSyntax.self),
          .node(ArrowExprSyntax.self),
          .node(AsExprSyntax.self),
          .node(AssignmentExprSyntax.self),
          .node(AssociatedTypeDeclSyntax.self),
          .node(AttributeListSyntax.self),
          .node(AttributeSyntax.self),
          .node(AttributedTypeSyntax.self),
          .node(AvailabilityArgumentListSyntax.self),
          .node(AvailabilityArgumentSyntax.self),
          .node(AvailabilityConditionSyntax.self),
          .node(AvailabilityLabeledArgumentSyntax.self),
          .node(AwaitExprSyntax.self),
          .node(BackDeployedAttributeArgumentsSyntax.self),
          .node(BinaryOperatorExprSyntax.self),
          .node(BooleanLiteralExprSyntax.self),
          .node(BorrowExprSyntax.self),
          .node(BreakStmtSyntax.self),
          .node(CanImportExprSyntax.self),
          .node(CanImportVersionInfoSyntax.self),
          .node(CatchClauseListSyntax.self),
          .node(CatchClauseSyntax.self),
          .node(CatchItemListSyntax.self),
          .node(CatchItemSyntax.self),
          .node(ClassDeclSyntax.self),
          .node(ClassRestrictionTypeSyntax.self),
          .node(ClosureCaptureClauseSyntax.self),
          .node(ClosureCaptureListSyntax.self),
          .node(ClosureCaptureSpecifierSyntax.self),
          .node(ClosureCaptureSyntax.self),
          .node(ClosureExprSyntax.self),
          .node(ClosureParameterClauseSyntax.self),
          .node(ClosureParameterListSyntax.self),
          .node(ClosureParameterSyntax.self),
          .node(ClosureShorthandParameterListSyntax.self),
          .node(ClosureShorthandParameterSyntax.self),
          .node(ClosureSignatureSyntax.self),
          .node(CodeBlockItemListSyntax.self),
          .node(CodeBlockItemSyntax.self),
          .node(CodeBlockSyntax.self),
          .node(CompositionTypeElementListSyntax.self),
          .node(CompositionTypeElementSyntax.self),
          .node(CompositionTypeSyntax.self),
          .node(ConditionElementListSyntax.self),
          .node(ConditionElementSyntax.self),
          .node(ConformanceRequirementSyntax.self),
          .node(ConsumeExprSyntax.self),
          .node(ContinueStmtSyntax.self),
          .node(ConventionAttributeArgumentsSyntax.self),
          .node(ConventionWitnessMethodAttributeArgumentsSyntax.self),
          .node(CopyExprSyntax.self),
          .node(DeclModifierDetailSyntax.self),
          .node(DeclModifierListSyntax.self),
          .node(DeclModifierSyntax.self),
          .node(DeclNameArgumentListSyntax.self),
          .node(DeclNameArgumentSyntax.self),
          .node(DeclNameArgumentsSyntax.self),
          .node(DeclReferenceExprSyntax.self),
          .node(DeferStmtSyntax.self),
          .node(DeinitializerDeclSyntax.self),
          .node(DeinitializerEffectSpecifiersSyntax.self),
          .node(DerivativeAttributeArgumentsSyntax.self),
          .node(DesignatedTypeListSyntax.self),
          .node(DesignatedTypeSyntax.self),
          .node(DictionaryElementListSyntax.self),
          .node(DictionaryElementSyntax.self),
          .node(DictionaryExprSyntax.self),
          .node(DictionaryTypeSyntax.self),
          .node(DifferentiabilityArgumentListSyntax.self),
          .node(DifferentiabilityArgumentSyntax.self),
          .node(DifferentiabilityArgumentsSyntax.self),
          .node(DifferentiabilityWithRespectToArgumentSyntax.self),
          .node(DifferentiableAttributeArgumentsSyntax.self),
          .node(DiscardAssignmentExprSyntax.self),
          .node(DiscardStmtSyntax.self),
          .node(DoExprSyntax.self),
          .node(DoStmtSyntax.self),
          .node(DocumentationAttributeArgumentListSyntax.self),
          .node(DocumentationAttributeArgumentSyntax.self),
          .node(DynamicReplacementAttributeArgumentsSyntax.self),
          .node(EditorPlaceholderDeclSyntax.self),
          .node(EditorPlaceholderExprSyntax.self),
          .node(EffectsAttributeArgumentListSyntax.self),
          .node(EnumCaseDeclSyntax.self),
          .node(EnumCaseElementListSyntax.self),
          .node(EnumCaseElementSyntax.self),
          .node(EnumCaseParameterClauseSyntax.self),
          .node(EnumCaseParameterListSyntax.self),
          .node(EnumCaseParameterSyntax.self),
          .node(EnumDeclSyntax.self),
          .node(ExposeAttributeArgumentsSyntax.self),
          .node(ExprListSyntax.self),
          .node(ExpressionPatternSyntax.self),
          .node(ExpressionSegmentSyntax.self),
          .node(ExpressionStmtSyntax.self),
          .node(ExtensionDeclSyntax.self),
          .node(FallThroughStmtSyntax.self),
          .node(FloatLiteralExprSyntax.self),
          .node(ForStmtSyntax.self),
          .node(ForceUnwrapExprSyntax.self),
          .node(FunctionCallExprSyntax.self),
          .node(FunctionDeclSyntax.self),
          .node(FunctionEffectSpecifiersSyntax.self),
          .node(FunctionParameterClauseSyntax.self),
          .node(FunctionParameterListSyntax.self),
          .node(FunctionParameterSyntax.self),
          .node(FunctionSignatureSyntax.self),
          .node(FunctionTypeSyntax.self),
          .node(GenericArgumentClauseSyntax.self),
          .node(GenericArgumentListSyntax.self),
          .node(GenericArgumentSyntax.self),
          .node(GenericParameterClauseSyntax.self),
          .node(GenericParameterListSyntax.self),
          .node(GenericParameterSyntax.self),
          .node(GenericRequirementListSyntax.self),
          .node(GenericRequirementSyntax.self),
          .node(GenericSpecializationExprSyntax.self),
          .node(GenericWhereClauseSyntax.self),
          .node(GuardStmtSyntax.self),
          .node(IdentifierPatternSyntax.self),
          .node(IdentifierTypeSyntax.self),
          .node(IfConfigClauseListSyntax.self),
          .node(IfConfigClauseSyntax.self),
          .node(IfConfigDeclSyntax.self),
          .node(IfExprSyntax.self),
          .node(ImplementsAttributeArgumentsSyntax.self),
          .node(ImplicitlyUnwrappedOptionalTypeSyntax.self),
          .node(ImportDeclSyntax.self),
          .node(ImportPathComponentListSyntax.self),
          .node(ImportPathComponentSyntax.self),
          .node(InOutExprSyntax.self),
          .node(InfixOperatorExprSyntax.self),
          .node(InheritanceClauseSyntax.self),
          .node(InheritedTypeListSyntax.self),
          .node(InheritedTypeSyntax.self),
          .node(InitializerClauseSyntax.self),
          .node(InitializerDeclSyntax.self),
          .node(IntegerLiteralExprSyntax.self),
          .node(IsExprSyntax.self),
          .node(IsTypePatternSyntax.self),
          .node(KeyPathComponentListSyntax.self),
          .node(KeyPathComponentSyntax.self),
          .node(KeyPathExprSyntax.self),
          .node(KeyPathOptionalComponentSyntax.self),
          .node(KeyPathPropertyComponentSyntax.self),
          .node(KeyPathSubscriptComponentSyntax.self),
          .node(LabeledExprListSyntax.self),
          .node(LabeledExprSyntax.self),
          .node(LabeledSpecializeArgumentSyntax.self),
          .node(LabeledStmtSyntax.self),
          .node(LayoutRequirementSyntax.self),
          .node(MacroDeclSyntax.self),
          .node(MacroExpansionDeclSyntax.self),
          .node(MacroExpansionExprSyntax.self),
          .node(MatchingPatternConditionSyntax.self),
          .node(MemberAccessExprSyntax.self),
          .node(MemberBlockItemListSyntax.self),
          .node(MemberBlockItemSyntax.self),
          .node(MemberBlockSyntax.self),
          .node(MemberTypeSyntax.self),
          .node(MetatypeTypeSyntax.self),
          .node(MissingDeclSyntax.self),
          .node(MissingExprSyntax.self),
          .node(MissingPatternSyntax.self),
          .node(MissingStmtSyntax.self),
          .node(MissingSyntax.self),
          .node(MissingTypeSyntax.self),
          .node(MultipleTrailingClosureElementListSyntax.self),
          .node(MultipleTrailingClosureElementSyntax.self),
          .node(NamedOpaqueReturnTypeSyntax.self),
          .node(NilLiteralExprSyntax.self),
          .node(ObjCSelectorPieceListSyntax.self),
          .node(ObjCSelectorPieceSyntax.self),
          .node(OpaqueReturnTypeOfAttributeArgumentsSyntax.self),
          .node(OperatorDeclSyntax.self),
          .node(OperatorPrecedenceAndTypesSyntax.self),
          .node(OptionalBindingConditionSyntax.self),
          .node(OptionalChainingExprSyntax.self),
          .node(OptionalTypeSyntax.self),
          .node(OriginallyDefinedInAttributeArgumentsSyntax.self),
          .node(PackElementExprSyntax.self),
          .node(PackElementTypeSyntax.self),
          .node(PackExpansionExprSyntax.self),
          .node(PackExpansionTypeSyntax.self),
          .node(PatternBindingListSyntax.self),
          .node(PatternBindingSyntax.self),
          .node(PatternExprSyntax.self),
          .node(PlatformVersionItemListSyntax.self),
          .node(PlatformVersionItemSyntax.self),
          .node(PlatformVersionSyntax.self),
          .node(PostfixIfConfigExprSyntax.self),
          .node(PostfixOperatorExprSyntax.self),
          .node(PoundSourceLocationArgumentsSyntax.self),
          .node(PoundSourceLocationSyntax.self),
          .node(PrecedenceGroupAssignmentSyntax.self),
          .node(PrecedenceGroupAssociativitySyntax.self),
          .node(PrecedenceGroupAttributeListSyntax.self),
          .node(PrecedenceGroupDeclSyntax.self),
          .node(PrecedenceGroupNameListSyntax.self),
          .node(PrecedenceGroupNameSyntax.self),
          .node(PrecedenceGroupRelationSyntax.self),
          .node(PrefixOperatorExprSyntax.self),
          .node(PrimaryAssociatedTypeClauseSyntax.self),
          .node(PrimaryAssociatedTypeListSyntax.self),
          .node(PrimaryAssociatedTypeSyntax.self),
          .node(ProtocolDeclSyntax.self),
          .node(RegexLiteralExprSyntax.self),
          .node(RepeatStmtSyntax.self),
          .node(ReturnClauseSyntax.self),
          .node(ReturnStmtSyntax.self),
          .node(SameTypeRequirementSyntax.self),
          .node(SequenceExprSyntax.self),
          .node(SimpleStringLiteralExprSyntax.self),
          .node(SimpleStringLiteralSegmentListSyntax.self),
          .node(SomeOrAnyTypeSyntax.self),
          .node(SourceFileSyntax.self),
          .node(SpecializeAttributeArgumentListSyntax.self),
          .node(SpecializeAvailabilityArgumentSyntax.self),
          .node(SpecializeTargetFunctionArgumentSyntax.self),
          .node(StringLiteralExprSyntax.self),
          .node(StringLiteralSegmentListSyntax.self),
          .node(StringSegmentSyntax.self),
          .node(StructDeclSyntax.self),
          .node(SubscriptCallExprSyntax.self),
          .node(SubscriptDeclSyntax.self),
          .node(SuperExprSyntax.self),
          .node(SuppressedTypeSyntax.self),
          .node(SwitchCaseItemListSyntax.self),
          .node(SwitchCaseItemSyntax.self),
          .node(SwitchCaseLabelSyntax.self),
          .node(SwitchCaseListSyntax.self),
          .node(SwitchCaseSyntax.self),
          .node(SwitchDefaultLabelSyntax.self),
          .node(SwitchExprSyntax.self),
          .node(TernaryExprSyntax.self),
          .node(ThenStmtSyntax.self),
          .node(ThrowStmtSyntax.self),
          .node(ThrownTypeClauseSyntax.self),
          .node(TryExprSyntax.self),
          .node(TupleExprSyntax.self),
          .node(TuplePatternElementListSyntax.self),
          .node(TuplePatternElementSyntax.self),
          .node(TuplePatternSyntax.self),
          .node(TupleTypeElementListSyntax.self),
          .node(TupleTypeElementSyntax.self),
          .node(TupleTypeSyntax.self),
          .node(TypeAliasDeclSyntax.self),
          .node(TypeAnnotationSyntax.self),
          .node(TypeEffectSpecifiersSyntax.self),
          .node(TypeExprSyntax.self),
          .node(TypeInitializerClauseSyntax.self),
          .node(UnavailableFromAsyncAttributeArgumentsSyntax.self),
          .node(UnderscorePrivateAttributeArgumentsSyntax.self),
          .node(UnexpectedNodesSyntax.self),
          .node(UnresolvedAsExprSyntax.self),
          .node(UnresolvedIsExprSyntax.self),
          .node(UnresolvedTernaryExprSyntax.self),
          .node(ValueBindingPatternSyntax.self),
          .node(VariableDeclSyntax.self),
          .node(VersionComponentListSyntax.self),
          .node(VersionComponentSyntax.self),
          .node(VersionTupleSyntax.self),
          .node(WhereClauseSyntax.self),
          .node(WhileStmtSyntax.self),
          .node(WildcardPatternSyntax.self),
          .node(YieldStmtSyntax.self),
          .node(YieldedExpressionListSyntax.self),
          .node(YieldedExpressionSyntax.self),
          .node(YieldedExpressionsClauseSyntax.self)
        ])
  }
}

/// Protocol that syntax nodes conform to if they don't have any semantic subtypes.
/// These are syntax nodes that are not considered base nodes for other syntax types.
///
/// Syntax nodes conforming to this protocol have their inherited casting methods
/// deprecated to prevent incorrect casting.
public protocol _LeafSyntaxNodeProtocol: SyntaxProtocol {}

public extension _LeafSyntaxNodeProtocol {
  /// Checks if the current leaf syntax node can be cast to a different specified type.
  ///
  /// - Returns: `false` since the leaf node cannot be cast to a different specified type.
  ///
  /// - Note: This method overloads the general `is` method and is marked as deprecated to produce a warning,
  ///         informing the user that the cast will always fail.
  @available(*, deprecated, message: "This cast will always fail")
  func `is`<S: SyntaxProtocol>(_ syntaxType: S.Type) -> Bool {
    return false
  }
  

  /// Attempts to cast the current leaf syntax node to a different specified type.
  ///
  /// - Returns: `nil` since the leaf node cannot be cast to a different specified type.
  ///
  /// - Note: This method overloads the general `as` method and is marked as deprecated to produce a warning,
  ///         informing the user that the cast will always fail.
  @available(*, deprecated, message: "This cast will always fail")
  func `as`<S: SyntaxProtocol>(_ syntaxType: S.Type) -> S? {
    return nil
  }
  

  /// Force-casts the current leaf syntax node to a different specified type.
  ///
  /// - Returns: This method will always trigger a runtime crash and never return.
  ///
  /// - Note: This method overloads the general `cast` method and is marked as deprecated to produce a warning,
  ///         informing the user that the cast will always fail.
  /// - Warning: Invoking this method will lead to a fatal error.
  @available(*, deprecated, message: "This cast will always fail")
  func cast<S: SyntaxProtocol>(_ syntaxType: S.Type) -> S {
    fatalError("\(Self.self) cannot be cast to \(S.self)")
  }
}
