//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension PrefixOperatorExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeOperator")
  public var unexpectedBeforeOperatorToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeOperator
    }
    set {
      unexpectedBeforeOperator = newValue
    }
  }
  
  @available(*, deprecated, renamed: "operator")
  public var operatorToken: TokenSyntax {
    get {
      return `operator`
    }
    set {
      `operator` = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenOperatorAndExpression")
  public var unexpectedBetweenOperatorTokenAndPostfixExpression: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenOperatorAndExpression
    }
    set {
      unexpectedBetweenOperatorAndExpression = newValue
    }
  }
  
  @available(*, deprecated, renamed: "expression")
  public var postfixExpression: ExprSyntax {
    get {
      return expression
    }
    set {
      expression = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterExpression")
  public var unexpectedAfterPostfixExpression: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterExpression
    }
    set {
      unexpectedAfterExpression = newValue
    }
  }
  
  @available(*, deprecated, renamed: "PrefixOperatorExprSyntax(leadingTrivia:_:operator:_:expression:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeOperatorToken: UnexpectedNodesSyntax? = nil,
      operatorToken: TokenSyntax,
      _ unexpectedBetweenOperatorTokenAndPostfixExpression: UnexpectedNodesSyntax? = nil,
      postfixExpression: some ExprSyntaxProtocol,
      _ unexpectedAfterPostfixExpression: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeOperatorToken, 
        operator: operatorToken, 
        unexpectedBetweenOperatorTokenAndPostfixExpression, 
        expression: postfixExpression, 
        unexpectedAfterPostfixExpression, 
        trailingTrivia: trailingTrivia
      )
  }
}
