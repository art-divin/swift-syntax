//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension SameTypeRequirementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftType")
  public var unexpectedBeforeLeftTypeIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftType
    }
    set {
      unexpectedBeforeLeftType = newValue
    }
  }
  
  @available(*, deprecated, renamed: "leftType")
  public var leftTypeIdentifier: TypeSyntax {
    get {
      return leftType
    }
    set {
      leftType = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftTypeAndEqual")
  public var unexpectedBetweenLeftTypeIdentifierAndEqualityToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftTypeAndEqual
    }
    set {
      unexpectedBetweenLeftTypeAndEqual = newValue
    }
  }
  
  @available(*, deprecated, renamed: "equal")
  public var equalityToken: TokenSyntax {
    get {
      return equal
    }
    set {
      equal = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenEqualAndRightType")
  public var unexpectedBetweenEqualityTokenAndRightTypeIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenEqualAndRightType
    }
    set {
      unexpectedBetweenEqualAndRightType = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rightType")
  public var rightTypeIdentifier: TypeSyntax {
    get {
      return rightType
    }
    set {
      rightType = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterRightType")
  public var unexpectedAfterRightTypeIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightType
    }
    set {
      unexpectedAfterRightType = newValue
    }
  }
  
  @available(*, deprecated, renamed: "SameTypeRequirementSyntax(leadingTrivia:_:leftType:_:equal:_:rightType:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftTypeIdentifier: UnexpectedNodesSyntax? = nil,
      leftTypeIdentifier: some TypeSyntaxProtocol,
      _ unexpectedBetweenLeftTypeIdentifierAndEqualityToken: UnexpectedNodesSyntax? = nil,
      equalityToken: TokenSyntax,
      _ unexpectedBetweenEqualityTokenAndRightTypeIdentifier: UnexpectedNodesSyntax? = nil,
      rightTypeIdentifier: some TypeSyntaxProtocol,
      _ unexpectedAfterRightTypeIdentifier: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftTypeIdentifier, 
        leftType: leftTypeIdentifier, 
        unexpectedBetweenLeftTypeIdentifierAndEqualityToken, 
        equal: equalityToken, 
        unexpectedBetweenEqualityTokenAndRightTypeIdentifier, 
        rightType: rightTypeIdentifier, 
        unexpectedAfterRightTypeIdentifier, 
        trailingTrivia: trailingTrivia
      )
  }
}
