//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension TernaryExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeCondition")
  public var unexpectedBeforeConditionExpression: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeCondition
    }
    set {
      unexpectedBeforeCondition = newValue
    }
  }
  
  @available(*, deprecated, renamed: "condition")
  public var conditionExpression: ExprSyntax {
    get {
      return condition
    }
    set {
      condition = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenConditionAndQuestionMark")
  public var unexpectedBetweenConditionExpressionAndQuestionMark: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenConditionAndQuestionMark
    }
    set {
      unexpectedBetweenConditionAndQuestionMark = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenQuestionMarkAndThenExpression")
  public var unexpectedBetweenQuestionMarkAndFirstChoice: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenQuestionMarkAndThenExpression
    }
    set {
      unexpectedBetweenQuestionMarkAndThenExpression = newValue
    }
  }
  
  @available(*, deprecated, renamed: "thenExpression")
  public var firstChoice: ExprSyntax {
    get {
      return thenExpression
    }
    set {
      thenExpression = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenThenExpressionAndColon")
  public var unexpectedBetweenFirstChoiceAndColonMark: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenThenExpressionAndColon
    }
    set {
      unexpectedBetweenThenExpressionAndColon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "colon")
  public var colonMark: TokenSyntax {
    get {
      return colon
    }
    set {
      colon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndElseExpression")
  public var unexpectedBetweenColonMarkAndSecondChoice: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndElseExpression
    }
    set {
      unexpectedBetweenColonAndElseExpression = newValue
    }
  }
  
  @available(*, deprecated, renamed: "elseExpression")
  public var secondChoice: ExprSyntax {
    get {
      return elseExpression
    }
    set {
      elseExpression = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterElseExpression")
  public var unexpectedAfterSecondChoice: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterElseExpression
    }
    set {
      unexpectedAfterElseExpression = newValue
    }
  }
  
  @available(*, deprecated, renamed: "TernaryExprSyntax(leadingTrivia:_:condition:_:questionMark:_:thenExpression:_:colon:_:elseExpression:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeConditionExpression: UnexpectedNodesSyntax? = nil,
      conditionExpression: some ExprSyntaxProtocol,
      _ unexpectedBetweenConditionExpressionAndQuestionMark: UnexpectedNodesSyntax? = nil,
      questionMark: TokenSyntax = .infixQuestionMarkToken(),
      _ unexpectedBetweenQuestionMarkAndFirstChoice: UnexpectedNodesSyntax? = nil,
      firstChoice: some ExprSyntaxProtocol,
      _ unexpectedBetweenFirstChoiceAndColonMark: UnexpectedNodesSyntax? = nil,
      colonMark: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonMarkAndSecondChoice: UnexpectedNodesSyntax? = nil,
      secondChoice: some ExprSyntaxProtocol,
      _ unexpectedAfterSecondChoice: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeConditionExpression, 
        condition: conditionExpression, 
        unexpectedBetweenConditionExpressionAndQuestionMark, 
        questionMark: questionMark, 
        unexpectedBetweenQuestionMarkAndFirstChoice, 
        thenExpression: firstChoice, 
        unexpectedBetweenFirstChoiceAndColonMark, 
        colon: colonMark, 
        unexpectedBetweenColonMarkAndSecondChoice, 
        elseExpression: secondChoice, 
        unexpectedAfterSecondChoice, 
        trailingTrivia: trailingTrivia
      )
  }
}
