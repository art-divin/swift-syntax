//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension GenericArgumentClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftAngle")
  public var unexpectedBeforeLeftAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftAngle
    }
    set {
      unexpectedBeforeLeftAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "leftAngle")
  public var leftAngleBracket: TokenSyntax {
    get {
      return leftAngle
    }
    set {
      leftAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftAngleAndArguments")
  public var unexpectedBetweenLeftAngleBracketAndArguments: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftAngleAndArguments
    }
    set {
      unexpectedBetweenLeftAngleAndArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightAngle")
  public var unexpectedBetweenArgumentsAndRightAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndRightAngle
    }
    set {
      unexpectedBetweenArgumentsAndRightAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rightAngle")
  public var rightAngleBracket: TokenSyntax {
    get {
      return rightAngle
    }
    set {
      rightAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterRightAngle")
  public var unexpectedAfterRightAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightAngle
    }
    set {
      unexpectedAfterRightAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "GenericArgumentClauseSyntax(leadingTrivia:_:leftAngle:_:arguments:_:rightAngle:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftAngleBracket: UnexpectedNodesSyntax? = nil,
      leftAngleBracket: TokenSyntax = .leftAngleToken(),
      _ unexpectedBetweenLeftAngleBracketAndArguments: UnexpectedNodesSyntax? = nil,
      arguments: GenericArgumentListSyntax,
      _ unexpectedBetweenArgumentsAndRightAngleBracket: UnexpectedNodesSyntax? = nil,
      rightAngleBracket: TokenSyntax = .rightAngleToken(),
      _ unexpectedAfterRightAngleBracket: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftAngleBracket, 
        leftAngle: leftAngleBracket, 
        unexpectedBetweenLeftAngleBracketAndArguments, 
        arguments: arguments, 
        unexpectedBetweenArgumentsAndRightAngleBracket, 
        rightAngle: rightAngleBracket, 
        unexpectedAfterRightAngleBracket, 
        trailingTrivia: trailingTrivia
      )
  }
}
