//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension MacroExpansionExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforePound")
  public var unexpectedBeforePoundToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforePound
    }
    set {
      unexpectedBeforePound = newValue
    }
  }
  
  @available(*, deprecated, renamed: "pound")
  public var poundToken: TokenSyntax {
    get {
      return pound
    }
    set {
      pound = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenPoundAndMacroName")
  public var unexpectedBetweenPoundTokenAndMacro: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPoundAndMacroName
    }
    set {
      unexpectedBetweenPoundAndMacroName = newValue
    }
  }
  
  @available(*, deprecated, renamed: "macroName")
  public var macro: TokenSyntax {
    get {
      return macroName
    }
    set {
      macroName = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenMacroNameAndGenericArgumentClause")
  public var unexpectedBetweenMacroAndGenericArguments: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenMacroNameAndGenericArgumentClause
    }
    set {
      unexpectedBetweenMacroNameAndGenericArgumentClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "genericArgumentClause")
  public var genericArguments: GenericArgumentClauseSyntax? {
    get {
      return genericArgumentClause
    }
    set {
      genericArgumentClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenGenericArgumentClauseAndLeftParen")
  public var unexpectedBetweenGenericArgumentsAndLeftParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenGenericArgumentClauseAndLeftParen
    }
    set {
      unexpectedBetweenGenericArgumentClauseAndLeftParen = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndArguments")
  public var unexpectedBetweenLeftParenAndArgumentList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndArguments
    }
    set {
      unexpectedBetweenLeftParenAndArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "arguments")
  public var argumentList: LabeledExprListSyntax {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightParen")
  public var unexpectedBetweenArgumentListAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndRightParen
    }
    set {
      unexpectedBetweenArgumentsAndRightParen = newValue
    }
  }
  
  @available(*, deprecated, renamed: "MacroExpansionExprSyntax(leadingTrivia:_:pound:_:macroName:_:genericArgumentClause:_:leftParen:_:arguments:_:rightParen:_:trailingClosure:_:additionalTrailingClosures:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforePoundToken: UnexpectedNodesSyntax? = nil,
      poundToken: TokenSyntax = .poundToken(),
      _ unexpectedBetweenPoundTokenAndMacro: UnexpectedNodesSyntax? = nil,
      macro: TokenSyntax,
      _ unexpectedBetweenMacroAndGenericArguments: UnexpectedNodesSyntax? = nil,
      genericArguments: GenericArgumentClauseSyntax? = nil,
      _ unexpectedBetweenGenericArgumentsAndLeftParen: UnexpectedNodesSyntax? = nil,
      leftParen: TokenSyntax? = nil,
      _ unexpectedBetweenLeftParenAndArgumentList: UnexpectedNodesSyntax? = nil,
      argumentList: LabeledExprListSyntax,
      _ unexpectedBetweenArgumentListAndRightParen: UnexpectedNodesSyntax? = nil,
      rightParen: TokenSyntax? = nil,
      _ unexpectedBetweenRightParenAndTrailingClosure: UnexpectedNodesSyntax? = nil,
      trailingClosure: ClosureExprSyntax? = nil,
      _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
      additionalTrailingClosures: MultipleTrailingClosureElementListSyntax = [],
      _ unexpectedAfterAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforePoundToken, 
        pound: poundToken, 
        unexpectedBetweenPoundTokenAndMacro, 
        macroName: macro, 
        unexpectedBetweenMacroAndGenericArguments, 
        genericArgumentClause: genericArguments, 
        unexpectedBetweenGenericArgumentsAndLeftParen, 
        leftParen: leftParen, 
        unexpectedBetweenLeftParenAndArgumentList, 
        arguments: argumentList, 
        unexpectedBetweenArgumentListAndRightParen, 
        rightParen: rightParen, 
        unexpectedBetweenRightParenAndTrailingClosure, 
        trailingClosure: trailingClosure, 
        unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures, 
        additionalTrailingClosures: additionalTrailingClosures, 
        unexpectedAfterAdditionalTrailingClosures, 
        trailingTrivia: trailingTrivia
      )
  }
}
