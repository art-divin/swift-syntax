//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension SomeOrAnyTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenSomeOrAnySpecifierAndConstraint")
  public var unexpectedBetweenSomeOrAnySpecifierAndBaseType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenSomeOrAnySpecifierAndConstraint
    }
    set {
      unexpectedBetweenSomeOrAnySpecifierAndConstraint = newValue
    }
  }
  
  @available(*, deprecated, renamed: "constraint")
  public var baseType: TypeSyntax {
    get {
      return constraint
    }
    set {
      constraint = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterConstraint")
  public var unexpectedAfterBaseType: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterConstraint
    }
    set {
      unexpectedAfterConstraint = newValue
    }
  }
  
  @available(*, deprecated, renamed: "SomeOrAnyTypeSyntax(leadingTrivia:_:someOrAnySpecifier:_:constraint:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeSomeOrAnySpecifier: UnexpectedNodesSyntax? = nil,
      someOrAnySpecifier: TokenSyntax,
      _ unexpectedBetweenSomeOrAnySpecifierAndBaseType: UnexpectedNodesSyntax? = nil,
      baseType: some TypeSyntaxProtocol,
      _ unexpectedAfterBaseType: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeSomeOrAnySpecifier, 
        someOrAnySpecifier: someOrAnySpecifier, 
        unexpectedBetweenSomeOrAnySpecifierAndBaseType, 
        constraint: baseType, 
        unexpectedAfterBaseType, 
        trailingTrivia: trailingTrivia
      )
  }
}
