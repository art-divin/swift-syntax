//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension OperatorDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeFixitySpecifier")
  public var unexpectedBeforeFixity: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeFixitySpecifier
    }
    set {
      unexpectedBeforeFixitySpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "fixitySpecifier")
  public var fixity: TokenSyntax {
    get {
      return fixitySpecifier
    }
    set {
      fixitySpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenFixitySpecifierAndOperatorKeyword")
  public var unexpectedBetweenFixityAndOperatorKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenFixitySpecifierAndOperatorKeyword
    }
    set {
      unexpectedBetweenFixitySpecifierAndOperatorKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenOperatorKeywordAndName")
  public var unexpectedBetweenOperatorKeywordAndIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenOperatorKeywordAndName
    }
    set {
      unexpectedBetweenOperatorKeywordAndName = newValue
    }
  }
  
  @available(*, deprecated, renamed: "name")
  public var identifier: TokenSyntax {
    get {
      return name
    }
    set {
      name = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndOperatorPrecedenceAndTypes")
  public var unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenNameAndOperatorPrecedenceAndTypes
    }
    set {
      unexpectedBetweenNameAndOperatorPrecedenceAndTypes = newValue
    }
  }
  
  @available(*, deprecated, renamed: "OperatorDeclSyntax(leadingTrivia:_:fixitySpecifier:_:operatorKeyword:_:name:_:operatorPrecedenceAndTypes:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeFixity: UnexpectedNodesSyntax? = nil,
      fixity: TokenSyntax,
      _ unexpectedBetweenFixityAndOperatorKeyword: UnexpectedNodesSyntax? = nil,
      operatorKeyword: TokenSyntax = .keyword(.operator),
      _ unexpectedBetweenOperatorKeywordAndIdentifier: UnexpectedNodesSyntax? = nil,
      identifier: TokenSyntax,
      _ unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes: UnexpectedNodesSyntax? = nil,
      operatorPrecedenceAndTypes: OperatorPrecedenceAndTypesSyntax? = nil,
      _ unexpectedAfterOperatorPrecedenceAndTypes: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeFixity, 
        fixitySpecifier: fixity, 
        unexpectedBetweenFixityAndOperatorKeyword, 
        operatorKeyword: operatorKeyword, 
        unexpectedBetweenOperatorKeywordAndIdentifier, 
        name: identifier, 
        unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes, 
        operatorPrecedenceAndTypes: operatorPrecedenceAndTypes, 
        unexpectedAfterOperatorPrecedenceAndTypes, 
        trailingTrivia: trailingTrivia
      )
  }
}
