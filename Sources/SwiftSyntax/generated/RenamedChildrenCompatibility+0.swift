//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension AccessorDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifierAndAccessorSpecifier")
  public var unexpectedBetweenModifierAndAccessorKind: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenModifierAndAccessorSpecifier
    }
    set {
      unexpectedBetweenModifierAndAccessorSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "accessorSpecifier")
  public var accessorKind: TokenSyntax {
    get {
      return accessorSpecifier
    }
    set {
      accessorSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAccessorSpecifierAndParameters")
  public var unexpectedBetweenAccessorKindAndParameter: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAccessorSpecifierAndParameters
    }
    set {
      unexpectedBetweenAccessorSpecifierAndParameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "parameters")
  public var parameter: AccessorParametersSyntax? {
    get {
      return parameters
    }
    set {
      parameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndEffectSpecifiers")
  public var unexpectedBetweenParameterAndEffectSpecifiers: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParametersAndEffectSpecifiers
    }
    set {
      unexpectedBetweenParametersAndEffectSpecifiers = newValue
    }
  }
  
  @available(*, deprecated, renamed: "AccessorDeclSyntax(leadingTrivia:_:attributes:_:modifier:_:accessorSpecifier:_:parameters:_:effectSpecifiers:_:body:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
      attributes: AttributeListSyntax = [],
      _ unexpectedBetweenAttributesAndModifier: UnexpectedNodesSyntax? = nil,
      modifier: DeclModifierSyntax? = nil,
      _ unexpectedBetweenModifierAndAccessorKind: UnexpectedNodesSyntax? = nil,
      accessorKind: TokenSyntax,
      _ unexpectedBetweenAccessorKindAndParameter: UnexpectedNodesSyntax? = nil,
      parameter: AccessorParametersSyntax? = nil,
      _ unexpectedBetweenParameterAndEffectSpecifiers: UnexpectedNodesSyntax? = nil,
      effectSpecifiers: AccessorEffectSpecifiersSyntax? = nil,
      _ unexpectedBetweenEffectSpecifiersAndBody: UnexpectedNodesSyntax? = nil,
      body: CodeBlockSyntax? = nil,
      _ unexpectedAfterBody: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAttributes, 
        attributes: attributes, 
        unexpectedBetweenAttributesAndModifier, 
        modifier: modifier, 
        unexpectedBetweenModifierAndAccessorKind, 
        accessorSpecifier: accessorKind, 
        unexpectedBetweenAccessorKindAndParameter, 
        parameters: parameter, 
        unexpectedBetweenParameterAndEffectSpecifiers, 
        effectSpecifiers: effectSpecifiers, 
        unexpectedBetweenEffectSpecifiersAndBody, 
        body: body, 
        unexpectedAfterBody, 
        trailingTrivia: trailingTrivia
      )
  }
}
