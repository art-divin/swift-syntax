//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension DerivativeAttributeArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenPeriodAndAccessorSpecifier")
  public var unexpectedBetweenPeriodAndAccessorKind: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPeriodAndAccessorSpecifier
    }
    set {
      unexpectedBetweenPeriodAndAccessorSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "accessorSpecifier")
  public var accessorKind: TokenSyntax? {
    get {
      return accessorSpecifier
    }
    set {
      accessorSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAccessorSpecifierAndComma")
  public var unexpectedBetweenAccessorKindAndComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAccessorSpecifierAndComma
    }
    set {
      unexpectedBetweenAccessorSpecifierAndComma = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenCommaAndArguments")
  public var unexpectedBetweenCommaAndDiffParams: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenCommaAndArguments
    }
    set {
      unexpectedBetweenCommaAndArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "arguments")
  public var diffParams: DifferentiabilityWithRespectToArgumentSyntax? {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterArguments")
  public var unexpectedAfterDiffParams: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterArguments
    }
    set {
      unexpectedAfterArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "DerivativeAttributeArgumentsSyntax(leadingTrivia:_:ofLabel:_:colon:_:originalDeclName:_:period:_:accessorSpecifier:_:comma:_:arguments:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeOfLabel: UnexpectedNodesSyntax? = nil,
      ofLabel: TokenSyntax = .keyword(.of),
      _ unexpectedBetweenOfLabelAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndOriginalDeclName: UnexpectedNodesSyntax? = nil,
      originalDeclName: some ExprSyntaxProtocol,
      _ unexpectedBetweenOriginalDeclNameAndPeriod: UnexpectedNodesSyntax? = nil,
      period: TokenSyntax? = nil,
      _ unexpectedBetweenPeriodAndAccessorKind: UnexpectedNodesSyntax? = nil,
      accessorKind: TokenSyntax? = nil,
      _ unexpectedBetweenAccessorKindAndComma: UnexpectedNodesSyntax? = nil,
      comma: TokenSyntax? = nil,
      _ unexpectedBetweenCommaAndDiffParams: UnexpectedNodesSyntax? = nil,
      diffParams: DifferentiabilityWithRespectToArgumentSyntax? = nil,
      _ unexpectedAfterDiffParams: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeOfLabel, 
        ofLabel: ofLabel, 
        unexpectedBetweenOfLabelAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndOriginalDeclName, 
        originalDeclName: originalDeclName, 
        unexpectedBetweenOriginalDeclNameAndPeriod, 
        period: period, 
        unexpectedBetweenPeriodAndAccessorKind, 
        accessorSpecifier: accessorKind, 
        unexpectedBetweenAccessorKindAndComma, 
        comma: comma, 
        unexpectedBetweenCommaAndDiffParams, 
        arguments: diffParams, 
        unexpectedAfterDiffParams, 
        trailingTrivia: trailingTrivia
      )
  }
}
